

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue May 04 16:09:04 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 2.20
    16                           ; Generated 12/02/2020 GMT
    17                           ; 
    18                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F887 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  0008                     	;# 
    58  0009                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000D                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  001D                     	;# 
    82  001E                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0087                     	;# 
    88  0088                     	;# 
    89  0089                     	;# 
    90  008C                     	;# 
    91  008D                     	;# 
    92  008E                     	;# 
    93  008F                     	;# 
    94  0090                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0095                     	;# 
   102  0096                     	;# 
   103  0097                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  0105                     	;# 
   113  0107                     	;# 
   114  0108                     	;# 
   115  0109                     	;# 
   116  010C                     	;# 
   117  010C                     	;# 
   118  010D                     	;# 
   119  010E                     	;# 
   120  010F                     	;# 
   121  0185                     	;# 
   122  0187                     	;# 
   123  0188                     	;# 
   124  0189                     	;# 
   125  018C                     	;# 
   126  018D                     	;# 
   127  0000                     	;# 
   128  0001                     	;# 
   129  0002                     	;# 
   130  0003                     	;# 
   131  0004                     	;# 
   132  0005                     	;# 
   133  0006                     	;# 
   134  0007                     	;# 
   135  0008                     	;# 
   136  0009                     	;# 
   137  000A                     	;# 
   138  000B                     	;# 
   139  000C                     	;# 
   140  000D                     	;# 
   141  000E                     	;# 
   142  000E                     	;# 
   143  000F                     	;# 
   144  0010                     	;# 
   145  0011                     	;# 
   146  0012                     	;# 
   147  0013                     	;# 
   148  0014                     	;# 
   149  0015                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  001A                     	;# 
   156  001B                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  001D                     	;# 
   160  001E                     	;# 
   161  001F                     	;# 
   162  0081                     	;# 
   163  0085                     	;# 
   164  0086                     	;# 
   165  0087                     	;# 
   166  0088                     	;# 
   167  0089                     	;# 
   168  008C                     	;# 
   169  008D                     	;# 
   170  008E                     	;# 
   171  008F                     	;# 
   172  0090                     	;# 
   173  0091                     	;# 
   174  0092                     	;# 
   175  0093                     	;# 
   176  0093                     	;# 
   177  0093                     	;# 
   178  0094                     	;# 
   179  0095                     	;# 
   180  0096                     	;# 
   181  0097                     	;# 
   182  0098                     	;# 
   183  0099                     	;# 
   184  009A                     	;# 
   185  009B                     	;# 
   186  009C                     	;# 
   187  009D                     	;# 
   188  009E                     	;# 
   189  009F                     	;# 
   190  0105                     	;# 
   191  0107                     	;# 
   192  0108                     	;# 
   193  0109                     	;# 
   194  010C                     	;# 
   195  010C                     	;# 
   196  010D                     	;# 
   197  010E                     	;# 
   198  010F                     	;# 
   199  0185                     	;# 
   200  0187                     	;# 
   201  0188                     	;# 
   202  0189                     	;# 
   203  018C                     	;# 
   204  018D                     	;# 
   205  001A                     _RCREG	set	26
   206  000C                     _PIR1bits	set	12
   207  0019                     _TXREG	set	25
   208  0018                     _RCSTAbits	set	24
   209  0006                     _PORTB	set	6
   210  0005                     _PORTA	set	5
   211  009A                     _SPBRGH	set	154
   212  0099                     _SPBRG	set	153
   213  0098                     _TXSTAbits	set	152
   214  008F                     _OSCCONbits	set	143
   215  0086                     _TRISB	set	134
   216  0085                     _TRISA	set	133
   217  0187                     _BAUDCTLbits	set	391
   218  0189                     _ANSELH	set	393
   219  0188                     _ANSEL	set	392
   220                           
   221                           	psect	strings
   222  0003                     __pstrings:
   223  0003                     stringtab:
   224  0003                     __stringtab:
   225  0003                     stringcode:	
   226                           ;	String table - string pointers are 1 byte each
   227                           
   228  0003                     stringdir:
   229  0003  3000               	movlw	high stringdir
   230  0004  008A               	movwf	10
   231  0005  0804               	movf	4,w
   232  0006  0A84               	incf	4,f
   233  0007  0782               	addwf	2,f
   234  0008                     __stringbase:
   235  0008  3400               	retlw	0
   236  0009                     __end_of__stringtab:
   237  0009                     STR_6:
   238  0009  3420               	retlw	32	;' '
   239  000A  3449               	retlw	73	;'I'
   240  000B  346E               	retlw	110	;'n'
   241  000C  3467               	retlw	103	;'g'
   242  000D  3472               	retlw	114	;'r'
   243  000E  3465               	retlw	101	;'e'
   244  000F  3473               	retlw	115	;'s'
   245  0010  3461               	retlw	97	;'a'
   246  0011  3420               	retlw	32	;' '
   247  0012  3475               	retlw	117	;'u'
   248  0013  346E               	retlw	110	;'n'
   249  0014  3420               	retlw	32	;' '
   250  0015  3463               	retlw	99	;'c'
   251  0016  3461               	retlw	97	;'a'
   252  0017  3472               	retlw	114	;'r'
   253  0018  3461               	retlw	97	;'a'
   254  0019  3463               	retlw	99	;'c'
   255  001A  3474               	retlw	116	;'t'
   256  001B  3465               	retlw	101	;'e'
   257  001C  3472               	retlw	114	;'r'
   258  001D  3420               	retlw	32	;' '
   259  001E  3470               	retlw	112	;'p'
   260  001F  3461               	retlw	97	;'a'
   261  0020  3472               	retlw	114	;'r'
   262  0021  3461               	retlw	97	;'a'
   263  0022  3420               	retlw	32	;' '
   264  0023  3465               	retlw	101	;'e'
   265  0024  346C               	retlw	108	;'l'
   266  0025  3420               	retlw	32	;' '
   267  0026  3470               	retlw	112	;'p'
   268  0027  3475               	retlw	117	;'u'
   269  0028  3465               	retlw	101	;'e'
   270  0029  3472               	retlw	114	;'r'
   271  002A  3474               	retlw	116	;'t'
   272  002B  346F               	retlw	111	;'o'
   273  002C  3420               	retlw	32	;' '
   274  002D  3441               	retlw	65	;'A'
   275  002E  343A               	retlw	58	;':'
   276  002F  3420               	retlw	32	;' '
   277  0030  3400               	retlw	0
   278  0031                     STR_8:
   279  0031  3420               	retlw	32	;' '
   280  0032  3449               	retlw	73	;'I'
   281  0033  346E               	retlw	110	;'n'
   282  0034  3467               	retlw	103	;'g'
   283  0035  3472               	retlw	114	;'r'
   284  0036  3465               	retlw	101	;'e'
   285  0037  3473               	retlw	115	;'s'
   286  0038  3461               	retlw	97	;'a'
   287  0039  3420               	retlw	32	;' '
   288  003A  3475               	retlw	117	;'u'
   289  003B  346E               	retlw	110	;'n'
   290  003C  3420               	retlw	32	;' '
   291  003D  3463               	retlw	99	;'c'
   292  003E  3461               	retlw	97	;'a'
   293  003F  3472               	retlw	114	;'r'
   294  0040  3461               	retlw	97	;'a'
   295  0041  3463               	retlw	99	;'c'
   296  0042  3474               	retlw	116	;'t'
   297  0043  3465               	retlw	101	;'e'
   298  0044  3472               	retlw	114	;'r'
   299  0045  3420               	retlw	32	;' '
   300  0046  3470               	retlw	112	;'p'
   301  0047  3461               	retlw	97	;'a'
   302  0048  3472               	retlw	114	;'r'
   303  0049  3461               	retlw	97	;'a'
   304  004A  3420               	retlw	32	;' '
   305  004B  3465               	retlw	101	;'e'
   306  004C  346C               	retlw	108	;'l'
   307  004D  3420               	retlw	32	;' '
   308  004E  3470               	retlw	112	;'p'
   309  004F  3475               	retlw	117	;'u'
   310  0050  3465               	retlw	101	;'e'
   311  0051  3472               	retlw	114	;'r'
   312  0052  3474               	retlw	116	;'t'
   313  0053  346F               	retlw	111	;'o'
   314  0054  3420               	retlw	32	;' '
   315  0055  3442               	retlw	66	;'B'
   316  0056  343A               	retlw	58	;':'
   317  0057  3420               	retlw	32	;' '
   318  0058  3400               	retlw	0
   319  0059                     STR_2:
   320  0059  3420               	retlw	32	;' '
   321  005A  3431               	retlw	49	;'1'
   322  005B  3429               	retlw	41	;')'
   323  005C  3420               	retlw	32	;' '
   324  005D  3444               	retlw	68	;'D'
   325  005E  3465               	retlw	101	;'e'
   326  005F  3473               	retlw	115	;'s'
   327  0060  3470               	retlw	112	;'p'
   328  0061  346C               	retlw	108	;'l'
   329  0062  3465               	retlw	101	;'e'
   330  0063  3467               	retlw	103	;'g'
   331  0064  3461               	retlw	97	;'a'
   332  0065  3472               	retlw	114	;'r'
   333  0066  3420               	retlw	32	;' '
   334  0067  3463               	retlw	99	;'c'
   335  0068  3461               	retlw	97	;'a'
   336  0069  3464               	retlw	100	;'d'
   337  006A  3465               	retlw	101	;'e'
   338  006B  346E               	retlw	110	;'n'
   339  006C  3461               	retlw	97	;'a'
   340  006D  3420               	retlw	32	;' '
   341  006E  3464               	retlw	100	;'d'
   342  006F  3465               	retlw	101	;'e'
   343  0070  3420               	retlw	32	;' '
   344  0071  3463               	retlw	99	;'c'
   345  0072  3461               	retlw	97	;'a'
   346  0073  3472               	retlw	114	;'r'
   347  0074  3461               	retlw	97	;'a'
   348  0075  3463               	retlw	99	;'c'
   349  0076  3474               	retlw	116	;'t'
   350  0077  3465               	retlw	101	;'e'
   351  0078  3472               	retlw	114	;'r'
   352  0079  3465               	retlw	101	;'e'
   353  007A  3473               	retlw	115	;'s'
   354  007B  3420               	retlw	32	;' '
   355  007C  3400               	retlw	0
   356  007D                     STR_1:
   357  007D  3420               	retlw	32	;' '
   358  007E  3451               	retlw	81	;'Q'
   359  007F  3475               	retlw	117	;'u'
   360  0080  3465               	retlw	101	;'e'
   361  0081  3420               	retlw	32	;' '
   362  0082  3461               	retlw	97	;'a'
   363  0083  3463               	retlw	99	;'c'
   364  0084  3463               	retlw	99	;'c'
   365  0085  3469               	retlw	105	;'i'
   366  0086  346F               	retlw	111	;'o'
   367  0087  346E               	retlw	110	;'n'
   368  0088  3420               	retlw	32	;' '
   369  0089  3464               	retlw	100	;'d'
   370  008A  3465               	retlw	101	;'e'
   371  008B  3473               	retlw	115	;'s'
   372  008C  3465               	retlw	101	;'e'
   373  008D  3461               	retlw	97	;'a'
   374  008E  3420               	retlw	32	;' '
   375  008F  3465               	retlw	101	;'e'
   376  0090  346A               	retlw	106	;'j'
   377  0091  3465               	retlw	101	;'e'
   378  0092  3463               	retlw	99	;'c'
   379  0093  3475               	retlw	117	;'u'
   380  0094  3474               	retlw	116	;'t'
   381  0095  3461               	retlw	97	;'a'
   382  0096  3472               	retlw	114	;'r'
   383  0097  343F               	retlw	63	;'?'
   384  0098  3420               	retlw	32	;' '
   385  0099  3400               	retlw	0
   386  009A                     STR_3:
   387  009A  3420               	retlw	32	;' '
   388  009B  3432               	retlw	50	;'2'
   389  009C  3429               	retlw	41	;')'
   390  009D  3420               	retlw	32	;' '
   391  009E  3443               	retlw	67	;'C'
   392  009F  3461               	retlw	97	;'a'
   393  00A0  346D               	retlw	109	;'m'
   394  00A1  3462               	retlw	98	;'b'
   395  00A2  3469               	retlw	105	;'i'
   396  00A3  3461               	retlw	97	;'a'
   397  00A4  3472               	retlw	114	;'r'
   398  00A5  3420               	retlw	32	;' '
   399  00A6  3450               	retlw	80	;'P'
   400  00A7  344F               	retlw	79	;'O'
   401  00A8  3452               	retlw	82	;'R'
   402  00A9  3454               	retlw	84	;'T'
   403  00AA  3441               	retlw	65	;'A'
   404  00AB  3420               	retlw	32	;' '
   405  00AC  3400               	retlw	0
   406  00AD                     STR_4:
   407  00AD  3420               	retlw	32	;' '
   408  00AE  3433               	retlw	51	;'3'
   409  00AF  3429               	retlw	41	;')'
   410  00B0  3420               	retlw	32	;' '
   411  00B1  3443               	retlw	67	;'C'
   412  00B2  3461               	retlw	97	;'a'
   413  00B3  346D               	retlw	109	;'m'
   414  00B4  3462               	retlw	98	;'b'
   415  00B5  3469               	retlw	105	;'i'
   416  00B6  3461               	retlw	97	;'a'
   417  00B7  3472               	retlw	114	;'r'
   418  00B8  3420               	retlw	32	;' '
   419  00B9  3450               	retlw	80	;'P'
   420  00BA  344F               	retlw	79	;'O'
   421  00BB  3452               	retlw	82	;'R'
   422  00BC  3454               	retlw	84	;'T'
   423  00BD  3442               	retlw	66	;'B'
   424  00BE  3420               	retlw	32	;' '
   425  00BF  3400               	retlw	0
   426  00C0                     STR_5:
   427  00C0  3420               	retlw	32	;' '
   428  00C1  3448               	retlw	72	;'H'
   429  00C2  3465               	retlw	101	;'e'
   430  00C3  346C               	retlw	108	;'l'
   431  00C4  346C               	retlw	108	;'l'
   432  00C5  346F               	retlw	111	;'o'
   433  00C6  3420               	retlw	32	;' '
   434  00C7  3466               	retlw	102	;'f'
   435  00C8  3463               	retlw	99	;'c'
   436  00C9  346B               	retlw	107	;'k'
   437  00CA  3420               	retlw	32	;' '
   438  00CB  3477               	retlw	119	;'w'
   439  00CC  3472               	retlw	114	;'r'
   440  00CD  346C               	retlw	108	;'l'
   441  00CE  3464               	retlw	100	;'d'
   442  00CF  3420               	retlw	32	;' '
   443  00D0  3400               	retlw	0
   444  00D1                     STR_7:
   445  00D1  3420               	retlw	32	;' '
   446  00D2  344C               	retlw	76	;'L'
   447  00D3  3469               	retlw	105	;'i'
   448  00D4  3473               	retlw	115	;'s'
   449  00D5  3474               	retlw	116	;'t'
   450  00D6  346F               	retlw	111	;'o'
   451  00D7  3420               	retlw	32	;' '
   452  00D8  3400               	retlw	0
   453  00D1                     
   454                           	psect	cinit
   455  07FA                     start_initialization:	
   456                           ; #config settings
   457                           
   458  07FA                     __initialization:
   459                           
   460                           ; Clear objects allocated to COMMON
   461  07FA  01F5               	clrf	__pbssCOMMON& (0+127)
   462  07FB  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   463  07FC                     end_of_initialization:	
   464                           ;End of C runtime variable initialization code
   465                           
   466  07FC                     __end_of__initialization:
   467  07FC  0183               	clrf	3
   468  07FD  120A  118A  2F2F   	ljmp	_main	;jump to C main() function
   469                           
   470                           	psect	bssCOMMON
   471  0075                     __pbssCOMMON:
   472  0075                     _loop:
   473  0075                     	ds	1
   474  0076                     _valor:
   475  0076                     	ds	1
   476                           
   477                           	psect	cstackCOMMON
   478  0070                     __pcstackCOMMON:
   479  0070                     ?_USART_Cadena:
   480  0070                     ?_USART_Rx:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ??_USART_Rx:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0070                     ?_main:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     ?_USART_Tx:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0070                     ??_USART_Tx:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     USART_Tx@data:	
   496                           ; 1 bytes @ 0x0
   497                           
   498                           
   499                           ; 1 bytes @ 0x0
   500  0070                     	ds	1
   501  0071                     ??_USART_Cadena:
   502                           
   503                           ; 1 bytes @ 0x1
   504  0071                     	ds	1
   505  0072                     USART_Cadena@str:
   506                           
   507                           ; 1 bytes @ 0x2
   508  0072                     	ds	1
   509  0073                     ??_main:
   510                           
   511                           ; 1 bytes @ 0x3
   512  0073                     	ds	2
   513                           
   514                           	psect	maintext
   515  072F                     __pmaintext:	
   516 ;;
   517 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   518 ;;
   519 ;; *************** function _main *****************
   520 ;; Defined at:
   521 ;;		line 55 in file "uart.c"
   522 ;; Parameters:    Size  Location     Type
   523 ;;		None
   524 ;; Auto vars:     Size  Location     Type
   525 ;;		None
   526 ;; Return value:  Size  Location     Type
   527 ;;                  1    wreg      void 
   528 ;; Registers used:
   529 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   530 ;; Tracked objects:
   531 ;;		On entry : B00/0
   532 ;;		On exit  : 0/0
   533 ;;		Unchanged: 0/0
   534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   535 ;;      Params:         0       0       0       0       0
   536 ;;      Locals:         0       0       0       0       0
   537 ;;      Temps:          2       0       0       0       0
   538 ;;      Totals:         2       0       0       0       0
   539 ;;Total ram usage:        2 bytes
   540 ;; Hardware stack levels required when called:    2
   541 ;; This function calls:
   542 ;;		_USART_Cadena
   543 ;;		_USART_Rx
   544 ;; This function is called by:
   545 ;;		Startup code after reset
   546 ;; This function uses a non-reentrant model
   547 ;;
   548                           
   549                           
   550                           ;psect for function _main
   551  072F                     _main:
   552  072F                     l802:	
   553                           ;incstack = 0
   554                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   555                           
   556                           
   557                           ;uart.c: 57:     ANSEL = 0X00;
   558  072F  1683               	bsf	3,5	;RP0=1, select bank3
   559  0730  1703               	bsf	3,6	;RP1=1, select bank3
   560  0731  0188               	clrf	8	;volatile
   561                           
   562                           ;uart.c: 58:     ANSELH = 0x00;
   563  0732  0189               	clrf	9	;volatile
   564                           
   565                           ;uart.c: 60:     TRISA = 0x00;
   566  0733  1683               	bsf	3,5	;RP0=1, select bank1
   567  0734  1303               	bcf	3,6	;RP1=0, select bank1
   568  0735  0185               	clrf	5	;volatile
   569                           
   570                           ;uart.c: 61:     TRISB = 0x00;
   571  0736  0186               	clrf	6	;volatile
   572                           
   573                           ;uart.c: 63:     PORTA = 0x00;
   574  0737  1283               	bcf	3,5	;RP0=0, select bank0
   575  0738  1303               	bcf	3,6	;RP1=0, select bank0
   576  0739  0185               	clrf	5	;volatile
   577                           
   578                           ;uart.c: 64:     PORTB = 0x00;
   579  073A  0186               	clrf	6	;volatile
   580  073B                     l804:
   581                           
   582                           ;uart.c: 66:     OSCCONbits.IRCF = 0b111 ;
   583  073B  3070               	movlw	112
   584  073C  1683               	bsf	3,5	;RP0=1, select bank1
   585  073D  1303               	bcf	3,6	;RP1=0, select bank1
   586  073E  048F               	iorwf	15,f	;volatile
   587  073F                     l806:
   588                           
   589                           ;uart.c: 67:     OSCCONbits.SCS = 1;
   590  073F  140F               	bsf	15,0	;volatile
   591  0740                     l808:
   592                           
   593                           ;uart.c: 70:     TXSTAbits.SYNC = 0;
   594  0740  1218               	bcf	24,4	;volatile
   595  0741                     l810:
   596                           
   597                           ;uart.c: 71:     TXSTAbits.BRGH = 1;
   598  0741  1518               	bsf	24,2	;volatile
   599  0742                     l812:
   600                           
   601                           ;uart.c: 72:     BAUDCTLbits.BRG16 = 1;
   602  0742  1683               	bsf	3,5	;RP0=1, select bank3
   603  0743  1703               	bsf	3,6	;RP1=1, select bank3
   604  0744  1587               	bsf	7,3	;volatile
   605  0745                     l814:
   606                           
   607                           ;uart.c: 74:     SPBRG = 207;
   608  0745  30CF               	movlw	207
   609  0746  1683               	bsf	3,5	;RP0=1, select bank1
   610  0747  1303               	bcf	3,6	;RP1=0, select bank1
   611  0748  0099               	movwf	25	;volatile
   612  0749                     l816:
   613                           
   614                           ;uart.c: 75:     SPBRGH = 0;
   615  0749  019A               	clrf	26	;volatile
   616  074A                     l818:
   617                           
   618                           ;uart.c: 77:     RCSTAbits.SPEN = 1;
   619  074A  1283               	bcf	3,5	;RP0=0, select bank0
   620  074B  1303               	bcf	3,6	;RP1=0, select bank0
   621  074C  1798               	bsf	24,7	;volatile
   622  074D                     l820:
   623                           
   624                           ;uart.c: 78:     RCSTAbits.RX9 = 0;
   625  074D  1318               	bcf	24,6	;volatile
   626  074E                     l822:
   627                           
   628                           ;uart.c: 79:     RCSTAbits.CREN = 1;
   629  074E  1618               	bsf	24,4	;volatile
   630  074F                     l824:
   631                           
   632                           ;uart.c: 80:     TXSTAbits.TXEN = 1;
   633  074F  1683               	bsf	3,5	;RP0=1, select bank1
   634  0750  1303               	bcf	3,6	;RP1=0, select bank1
   635  0751  1698               	bsf	24,5	;volatile
   636  0752                     l826:
   637                           
   638                           ;uart.c: 86:         USART_Cadena(" Que accion desea ejecutar? ");
   639  0752  3075               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   640  0753  120A  118A  2710  120A  118A  	fcall	_USART_Cadena
   641  0758                     l828:
   642                           
   643                           ;uart.c: 87:         TXREG = '\n';
   644  0758  300A               	movlw	10
   645  0759  1283               	bcf	3,5	;RP0=0, select bank0
   646  075A  1303               	bcf	3,6	;RP1=0, select bank0
   647  075B  0099               	movwf	25	;volatile
   648  075C                     l830:
   649                           
   650                           ;uart.c: 88:         USART_Cadena(" 1) Desplegar cadena de caracteres ");
   651  075C  3051               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   652  075D  120A  118A  2710  120A  118A  	fcall	_USART_Cadena
   653  0762                     l832:
   654                           
   655                           ;uart.c: 89:         TXREG = '\n';
   656  0762  300A               	movlw	10
   657  0763  1283               	bcf	3,5	;RP0=0, select bank0
   658  0764  1303               	bcf	3,6	;RP1=0, select bank0
   659  0765  0099               	movwf	25	;volatile
   660  0766                     l834:
   661                           
   662                           ;uart.c: 90:         USART_Cadena(" 2) Cambiar PORTA ");
   663  0766  3092               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   664  0767  120A  118A  2710  120A  118A  	fcall	_USART_Cadena
   665  076C                     l836:
   666                           
   667                           ;uart.c: 91:         TXREG = '\n';
   668  076C  300A               	movlw	10
   669  076D  1283               	bcf	3,5	;RP0=0, select bank0
   670  076E  1303               	bcf	3,6	;RP1=0, select bank0
   671  076F  0099               	movwf	25	;volatile
   672  0770                     l838:
   673                           
   674                           ;uart.c: 92:         USART_Cadena(" 3) Cambiar PORTB ");
   675  0770  30A5               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   676  0771  120A  118A  2710  120A  118A  	fcall	_USART_Cadena
   677  0776                     l840:
   678                           
   679                           ;uart.c: 93:         TXREG = '\n';
   680  0776  300A               	movlw	10
   681  0777  1283               	bcf	3,5	;RP0=0, select bank0
   682  0778  1303               	bcf	3,6	;RP1=0, select bank0
   683  0779  0099               	movwf	25	;volatile
   684  077A                     l46:	
   685                           ;uart.c: 95:         while(PIR1bits.RCIF == 0);
   686                           
   687  077A  1E8C               	btfss	12,5	;volatile
   688  077B  2F7D               	goto	u101
   689  077C  2F7E               	goto	u100
   690  077D                     u101:
   691  077D  2F7A               	goto	l46
   692  077E                     u100:
   693  077E                     l48:
   694                           
   695                           ;uart.c: 97:         if(PIR1bits.RCIF){
   696  077E  1E8C               	btfss	12,5	;volatile
   697  077F  2F81               	goto	u111
   698  0780  2F82               	goto	u110
   699  0781                     u111:
   700  0781  2FED               	goto	l870
   701  0782                     u110:
   702  0782                     l842:
   703                           
   704                           ;uart.c: 99:             valor = USART_Rx();
   705  0782  120A  118A  2700  120A  118A  	fcall	_USART_Rx
   706  0787  00F3               	movwf	??_main
   707  0788  0873               	movf	??_main,w
   708  0789  00F6               	movwf	_valor
   709                           
   710                           ;uart.c: 101:             switch(valor){
   711  078A  2FDA               	goto	l868
   712  078B                     l844:
   713                           
   714                           ;uart.c: 103:                     USART_Cadena(" Hello fck wrld ");
   715  078B  30B8               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   716  078C  120A  118A  2710  120A  118A  	fcall	_USART_Cadena
   717                           
   718                           ;uart.c: 104:                     break;
   719  0791  2FED               	goto	l870
   720  0792                     l53:	
   721                           ;uart.c: 106:                 case ('2'):
   722                           
   723                           
   724                           ;uart.c: 107:                     loop = 1;
   725  0792  01F5               	clrf	_loop
   726  0793  0AF5               	incf	_loop,f
   727  0794                     l846:
   728                           
   729                           ;uart.c: 108:                     USART_Cadena(" Ingresa un caracter para el puerto A: "
      +                          );
   730  0794  3001               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   731  0795  120A  118A  2710  120A  118A  	fcall	_USART_Cadena
   732                           
   733                           ;uart.c: 109:                     while(loop){
   734  079A  2FAA               	goto	l852
   735  079B                     l55:
   736                           
   737                           ;uart.c: 110:                         if(PIR1bits.RCIF){
   738  079B  1283               	bcf	3,5	;RP0=0, select bank0
   739  079C  1303               	bcf	3,6	;RP1=0, select bank0
   740  079D  1E8C               	btfss	12,5	;volatile
   741  079E  2FA0               	goto	u121
   742  079F  2FA1               	goto	u120
   743  07A0                     u121:
   744  07A0  2FAA               	goto	l852
   745  07A1                     u120:
   746  07A1                     l848:
   747                           
   748                           ;uart.c: 111:                             PORTA = USART_Rx();
   749  07A1  120A  118A  2700  120A  118A  	fcall	_USART_Rx
   750  07A6  1283               	bcf	3,5	;RP0=0, select bank0
   751  07A7  1303               	bcf	3,6	;RP1=0, select bank0
   752  07A8  0085               	movwf	5	;volatile
   753  07A9                     l850:
   754                           
   755                           ;uart.c: 112:                             loop = 0;
   756  07A9  01F5               	clrf	_loop
   757  07AA                     l852:
   758                           
   759                           ;uart.c: 109:                     while(loop){
   760  07AA  0875               	movf	_loop,w
   761  07AB  1D03               	btfss	3,2
   762  07AC  2FAE               	goto	u131
   763  07AD  2FAF               	goto	u130
   764  07AE                     u131:
   765  07AE  2F9B               	goto	l55
   766  07AF                     u130:
   767  07AF                     l854:
   768                           
   769                           ;uart.c: 115:                     USART_Cadena(" Listo ");
   770  07AF  30C9               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   771  07B0  120A  118A  2710  120A  118A  	fcall	_USART_Cadena
   772                           
   773                           ;uart.c: 116:                     break;
   774  07B5  2FED               	goto	l870
   775  07B6                     l58:	
   776                           ;uart.c: 118:                 case ('3'):
   777                           
   778                           
   779                           ;uart.c: 119:                     loop = 1;
   780  07B6  01F5               	clrf	_loop
   781  07B7  0AF5               	incf	_loop,f
   782  07B8                     l856:
   783                           
   784                           ;uart.c: 120:                     USART_Cadena(" Ingresa un caracter para el puerto B: "
      +                          );
   785  07B8  3029               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
   786  07B9  120A  118A  2710  120A  118A  	fcall	_USART_Cadena
   787                           
   788                           ;uart.c: 121:                     while(loop){
   789  07BE  2FCE               	goto	l862
   790  07BF                     l60:
   791                           
   792                           ;uart.c: 122:                         if(PIR1bits.RCIF){
   793  07BF  1283               	bcf	3,5	;RP0=0, select bank0
   794  07C0  1303               	bcf	3,6	;RP1=0, select bank0
   795  07C1  1E8C               	btfss	12,5	;volatile
   796  07C2  2FC4               	goto	u141
   797  07C3  2FC5               	goto	u140
   798  07C4                     u141:
   799  07C4  2FCE               	goto	l862
   800  07C5                     u140:
   801  07C5                     l858:
   802                           
   803                           ;uart.c: 123:                             PORTB = USART_Rx();
   804  07C5  120A  118A  2700  120A  118A  	fcall	_USART_Rx
   805  07CA  1283               	bcf	3,5	;RP0=0, select bank0
   806  07CB  1303               	bcf	3,6	;RP1=0, select bank0
   807  07CC  0086               	movwf	6	;volatile
   808  07CD                     l860:
   809                           
   810                           ;uart.c: 124:                             loop = 0;
   811  07CD  01F5               	clrf	_loop
   812  07CE                     l862:
   813                           
   814                           ;uart.c: 121:                     while(loop){
   815  07CE  0875               	movf	_loop,w
   816  07CF  1D03               	btfss	3,2
   817  07D0  2FD2               	goto	u151
   818  07D1  2FD3               	goto	u150
   819  07D2                     u151:
   820  07D2  2FBF               	goto	l60
   821  07D3                     u150:
   822  07D3                     l864:
   823                           
   824                           ;uart.c: 127:                     USART_Cadena(" Listo ");
   825  07D3  30C9               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   826  07D4  120A  118A  2710  120A  118A  	fcall	_USART_Cadena
   827                           
   828                           ;uart.c: 128:                     break;
   829  07D9  2FED               	goto	l870
   830  07DA                     l868:
   831  07DA  0876               	movf	_valor,w
   832  07DB  00F3               	movwf	??_main
   833  07DC  01F4               	clrf	??_main+1
   834                           
   835                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   836                           ; Switch size 1, requested type "simple"
   837                           ; Number of cases is 1, Range of values is 0 to 0
   838                           ; switch strategies available:
   839                           ; Name         Instructions Cycles
   840                           ; simple_byte            4     3 (average)
   841                           ; direct_byte           11     8 (fixed)
   842                           ; jumptable            260     6 (fixed)
   843                           ;	Chosen strategy is simple_byte
   844  07DD  0874               	movf	??_main+1,w
   845  07DE  3A00               	xorlw	0	; case 0
   846  07DF  1903               	skipnz
   847  07E0  2FE2               	goto	l908
   848  07E1  2FED               	goto	l870
   849  07E2                     l908:
   850                           
   851                           ; Switch size 1, requested type "simple"
   852                           ; Number of cases is 3, Range of values is 49 to 51
   853                           ; switch strategies available:
   854                           ; Name         Instructions Cycles
   855                           ; simple_byte           10     6 (average)
   856                           ; direct_byte           20    11 (fixed)
   857                           ; jumptable            263     9 (fixed)
   858                           ;	Chosen strategy is simple_byte
   859  07E2  0873               	movf	??_main,w
   860  07E3  3A31               	xorlw	49	; case 49
   861  07E4  1903               	skipnz
   862  07E5  2F8B               	goto	l844
   863  07E6  3A03               	xorlw	3	; case 50
   864  07E7  1903               	skipnz
   865  07E8  2F92               	goto	l53
   866  07E9  3A01               	xorlw	1	; case 51
   867  07EA  1903               	skipnz
   868  07EB  2FB6               	goto	l58
   869  07EC  2FED               	goto	l870
   870  07ED                     l870:
   871                           
   872                           ;uart.c: 131:         _delay((unsigned long)((10)*(8000000/4000.0)));
   873  07ED  301A               	movlw	26
   874  07EE  00F4               	movwf	??_main+1
   875  07EF  30F8               	movlw	248
   876  07F0  00F3               	movwf	??_main
   877  07F1                     u167:
   878  07F1  0BF3               	decfsz	??_main,f
   879  07F2  2FF1               	goto	u167
   880  07F3  0BF4               	decfsz	??_main+1,f
   881  07F4  2FF1               	goto	u167
   882  07F5  0000               	nop
   883  07F6  2F52               	goto	l826
   884  07F7  120A  118A  2800   	ljmp	start
   885  07FA                     __end_of_main:
   886                           
   887                           	psect	text1
   888  0700                     __ptext1:	
   889 ;; *************** function _USART_Rx *****************
   890 ;; Defined at:
   891 ;;		line 143 in file "uart.c"
   892 ;; Parameters:    Size  Location     Type
   893 ;;		None
   894 ;; Auto vars:     Size  Location     Type
   895 ;;		None
   896 ;; Return value:  Size  Location     Type
   897 ;;                  1    wreg      unsigned char 
   898 ;; Registers used:
   899 ;;		wreg
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   905 ;;      Params:         0       0       0       0       0
   906 ;;      Locals:         0       0       0       0       0
   907 ;;      Temps:          0       0       0       0       0
   908 ;;      Totals:         0       0       0       0       0
   909 ;;Total ram usage:        0 bytes
   910 ;; Hardware stack levels used:    1
   911 ;; This function calls:
   912 ;;		Nothing
   913 ;; This function is called by:
   914 ;;		_main
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           
   919                           ;psect for function _USART_Rx
   920  0700                     _USART_Rx:
   921  0700                     l684:	
   922                           ;incstack = 0
   923                           ; Regs used in _USART_Rx: [wreg]
   924                           
   925                           
   926                           ;uart.c: 144:         return RCREG;
   927  0700  1283               	bcf	3,5	;RP0=0, select bank0
   928  0701  1303               	bcf	3,6	;RP1=0, select bank0
   929  0702  081A               	movf	26,w	;volatile
   930  0703                     l74:
   931  0703  0008               	return
   932  0704                     __end_of_USART_Rx:
   933                           
   934                           	psect	text2
   935  0710                     __ptext2:	
   936 ;; *************** function _USART_Cadena *****************
   937 ;; Defined at:
   938 ;;		line 147 in file "uart.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;  str             1    wreg     PTR unsigned char 
   941 ;;		 -> STR_9(8), STR_8(40), STR_7(8), STR_6(40), 
   942 ;;		 -> STR_5(17), STR_4(19), STR_3(19), STR_2(36), 
   943 ;;		 -> STR_1(29), 
   944 ;; Auto vars:     Size  Location     Type
   945 ;;  str             1    2[COMMON] PTR unsigned char 
   946 ;;		 -> STR_9(8), STR_8(40), STR_7(8), STR_6(40), 
   947 ;;		 -> STR_5(17), STR_4(19), STR_3(19), STR_2(36), 
   948 ;;		 -> STR_1(29), 
   949 ;; Return value:  Size  Location     Type
   950 ;;                  1    wreg      void 
   951 ;; Registers used:
   952 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   953 ;; Tracked objects:
   954 ;;		On entry : 0/0
   955 ;;		On exit  : 0/0
   956 ;;		Unchanged: 0/0
   957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   958 ;;      Params:         0       0       0       0       0
   959 ;;      Locals:         1       0       0       0       0
   960 ;;      Temps:          1       0       0       0       0
   961 ;;      Totals:         2       0       0       0       0
   962 ;;Total ram usage:        2 bytes
   963 ;; Hardware stack levels used:    1
   964 ;; Hardware stack levels required when called:    1
   965 ;; This function calls:
   966 ;;		_USART_Tx
   967 ;; This function is called by:
   968 ;;		_main
   969 ;; This function uses a non-reentrant model
   970 ;;
   971                           
   972                           
   973                           ;psect for function _USART_Cadena
   974  0710                     _USART_Cadena:
   975                           
   976                           ;incstack = 0
   977                           ; Regs used in _USART_Cadena: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   978                           ;USART_Cadena@str stored from wreg
   979  0710  00F2               	movwf	USART_Cadena@str
   980  0711                     l794:
   981                           
   982                           ;uart.c: 148:         while(*str != '\0'){
   983  0711  2F22               	goto	l800
   984  0712                     l796:
   985                           
   986                           ;uart.c: 149:             USART_Tx(*str);
   987  0712  0872               	movf	USART_Cadena@str,w
   988  0713  0084               	movwf	4
   989  0714  120A  118A  2003  120A  118A  	fcall	stringdir
   990  0719  120A  118A  2704  120A  118A  	fcall	_USART_Tx
   991  071E                     l798:
   992                           
   993                           ;uart.c: 150:             str++;
   994  071E  3001               	movlw	1
   995  071F  00F1               	movwf	??_USART_Cadena
   996  0720  0871               	movf	??_USART_Cadena,w
   997  0721  07F2               	addwf	USART_Cadena@str,f
   998  0722                     l800:
   999                           
  1000                           ;uart.c: 148:         while(*str != '\0'){
  1001  0722  0872               	movf	USART_Cadena@str,w
  1002  0723  0084               	movwf	4
  1003  0724  120A  118A  2003  120A  118A  	fcall	stringdir
  1004  0729  3A00               	xorlw	0
  1005  072A  1D03               	skipz
  1006  072B  2F2D               	goto	u91
  1007  072C  2F2E               	goto	u90
  1008  072D                     u91:
  1009  072D  2F12               	goto	l796
  1010  072E                     u90:
  1011  072E                     l80:
  1012  072E  0008               	return
  1013  072F                     __end_of_USART_Cadena:
  1014                           
  1015                           	psect	text3
  1016  0704                     __ptext3:	
  1017 ;; *************** function _USART_Tx *****************
  1018 ;; Defined at:
  1019 ;;		line 138 in file "uart.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;  data            1    wreg     unsigned char 
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;  data            1    0[COMMON] unsigned char 
  1024 ;; Return value:  Size  Location     Type
  1025 ;;                  1    wreg      void 
  1026 ;; Registers used:
  1027 ;;		wreg
  1028 ;; Tracked objects:
  1029 ;;		On entry : 0/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1033 ;;      Params:         0       0       0       0       0
  1034 ;;      Locals:         1       0       0       0       0
  1035 ;;      Temps:          0       0       0       0       0
  1036 ;;      Totals:         1       0       0       0       0
  1037 ;;Total ram usage:        1 bytes
  1038 ;; Hardware stack levels used:    1
  1039 ;; This function calls:
  1040 ;;		Nothing
  1041 ;; This function is called by:
  1042 ;;		_USART_Cadena
  1043 ;; This function uses a non-reentrant model
  1044 ;;
  1045                           
  1046                           
  1047                           ;psect for function _USART_Tx
  1048  0704                     _USART_Tx:
  1049                           
  1050                           ;incstack = 0
  1051                           ; Regs used in _USART_Tx: [wreg]
  1052                           ;USART_Tx@data stored from wreg
  1053  0704  00F0               	movwf	USART_Tx@data
  1054  0705                     l672:
  1055  0705                     l68:	
  1056                           ;uart.c: 139:         while(TXSTAbits.TRMT == 0);
  1057                           
  1058  0705  1683               	bsf	3,5	;RP0=1, select bank1
  1059  0706  1303               	bcf	3,6	;RP1=0, select bank1
  1060  0707  1C98               	btfss	24,1	;volatile
  1061  0708  2F0A               	goto	u11
  1062  0709  2F0B               	goto	u10
  1063  070A                     u11:
  1064  070A  2F05               	goto	l68
  1065  070B                     u10:
  1066  070B                     l674:
  1067                           
  1068                           ;uart.c: 140:         TXREG = data;
  1069  070B  0870               	movf	USART_Tx@data,w
  1070  070C  1283               	bcf	3,5	;RP0=0, select bank0
  1071  070D  1303               	bcf	3,6	;RP1=0, select bank0
  1072  070E  0099               	movwf	25	;volatile
  1073  070F                     l71:
  1074  070F  0008               	return
  1075  0710                     __end_of_USART_Tx:
  1076  007E                     btemp	set	126	;btemp
  1077  007E                     wtemp0	set	126
  1078                           
  1079                           	psect	config
  1080                           
  1081                           ;Config register CONFIG1 @ 0x2007
  1082                           ;	Oscillator Selection bits
  1083                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1084                           ;	Watchdog Timer Enable bit
  1085                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1086                           ;	Power-up Timer Enable bit
  1087                           ;	PWRTE = OFF, PWRT disabled
  1088                           ;	RE3/MCLR pin function select bit
  1089                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1090                           ;	Code Protection bit
  1091                           ;	CP = OFF, Program memory code protection is disabled
  1092                           ;	Data Code Protection bit
  1093                           ;	CPD = OFF, Data memory code protection is disabled
  1094                           ;	Brown Out Reset Selection bits
  1095                           ;	BOREN = OFF, BOR disabled
  1096                           ;	Internal External Switchover bit
  1097                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1098                           ;	Fail-Safe Clock Monitor Enabled bit
  1099                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  1100                           ;	Low Voltage Programming Enable bit
  1101                           ;	LVP = ON, RB3/PGM pin has PGM function, low voltage programming enabled
  1102                           ;	In-Circuit Debugger Mode bit
  1103                           ;	DEBUG = 0x1, unprogrammed default
  1104  2007                     	org	8199
  1105  2007  38D4               	dw	14548
  1106                           
  1107                           ;Config register CONFIG2 @ 0x2008
  1108                           ;	Brown-out Reset Selection bit
  1109                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1110                           ;	Flash Program Memory Self Write Enable bits
  1111                           ;	WRT = OFF, Write protection off
  1112  2008                     	org	8200
  1113  2008  3FFF               	dw	16383

Data Sizes:
    Strings     208
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    USART_Cadena@str	PTR unsigned char  size(1) Largest target is 40
		 -> STR_9(CODE[8]), STR_8(CODE[40]), STR_7(CODE[8]), STR_6(CODE[40]), 
		 -> STR_5(CODE[17]), STR_4(CODE[19]), STR_3(CODE[19]), STR_2(CODE[36]), 
		 -> STR_1(CODE[29]), 


Critical Paths under _main in COMMON

    _main->_USART_Cadena
    _USART_Cadena->_USART_Tx

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     357
                                              3 COMMON     2     2      0
                       _USART_Cadena
                           _USART_Rx
 ---------------------------------------------------------------------------------
 (1) _USART_Rx                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USART_Cadena                                         2     2      0     357
                                              1 COMMON     2     2      0
                           _USART_Tx
 ---------------------------------------------------------------------------------
 (2) _USART_Tx                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_Cadena
     _USART_Tx
   _USART_Rx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       7       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       7      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue May 04 16:09:04 2021

                      pc 0002                       l60 07BF                       l53 0792  
                     l46 077A                       l71 070F                       l55 079B  
                     l80 072E                       l48 077E                       l74 0703  
                     l58 07B6                       l68 0705                       u10 070B  
                     u11 070A                       u90 072E                       u91 072D  
                     fsr 0004                      l800 0722                      l810 0741  
                    l802 072F                      l820 074D                      l812 0742  
                    l804 073B                      l830 075C                      l822 074E  
                    l814 0745                      l806 073F                      l672 0705  
                    l840 0776                      l832 0762                      l824 074F  
                    l816 0749                      l808 0740                      l674 070B  
                    l850 07A9                      l842 0782                      l834 0766  
                    l826 0752                      l818 074A                      l684 0700  
                    l908 07E2                      l860 07CD                      l852 07AA  
                    l844 078B                      l836 076C                      l828 0758  
                    l862 07CE                      l854 07AF                      l846 0794  
                    l870 07ED                      l838 0770                      l864 07D3  
                    l856 07B8                      l848 07A1                      l794 0711  
                    l858 07C5                      l796 0712                      l868 07DA  
                    l798 071E                      u100 077E                      u101 077D  
                    u110 0782                      u111 0781                      u120 07A1  
                    u121 07A0                      u130 07AF                      u131 07AE  
                    u140 07C5                      u141 07C4                      u150 07D3  
                    u151 07D2                      u167 07F1                      fsr0 0004  
                   STR_1 007D                     STR_2 0059                     STR_3 009A  
                   STR_4 00AD                     STR_5 00C0                     STR_6 0009  
                   STR_7 00D1                     STR_8 0031                     STR_9 00D1  
                   _main 072F                     _loop 0075                     btemp 007E  
                   start 0000                    ?_main 0070                    _ANSEL 0188  
                  _RCREG 001A                    _SPBRG 0099                    _PORTA 0005  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  _TXREG 0019                    _valor 0076         __end_of_USART_Rx 0704  
       __end_of_USART_Tx 0710             USART_Tx@data 0070                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07FA  
           __end_of_main 07FA                   ??_main 0073                   _ANSELH 0189  
                 _SPBRGH 009A  __end_of__initialization 07FC           __pcstackCOMMON 0070  
              ?_USART_Rx 0070                ?_USART_Tx 0070               __pmaintext 072F  
             ??_USART_Rx 0070               ??_USART_Tx 0070               __stringtab 0003  
                __ptext1 0700                  __ptext2 0710                  __ptext3 0704  
   end_of_initialization 07FC                _RCSTAbits 0018            ?_USART_Cadena 0070  
              _TXSTAbits 0098              _BAUDCTLbits 0187        __size_of_USART_Rx 0004  
      __size_of_USART_Tx 000C      start_initialization 07FA           ??_USART_Cadena 0071  
            __pbssCOMMON 0075                ___latbits 0002                __pstrings 0003  
               _PIR1bits 000C          USART_Cadena@str 0072     __end_of_USART_Cadena 072F  
               _USART_Rx 0700                 _USART_Tx 0704              __stringbase 0008  
     __end_of__stringtab 0009            __size_of_main 00CB                stringcode 0003  
  __size_of_USART_Cadena 001F               _OSCCONbits 008F                 stringdir 0003  
               stringtab 0003             _USART_Cadena 0710  
