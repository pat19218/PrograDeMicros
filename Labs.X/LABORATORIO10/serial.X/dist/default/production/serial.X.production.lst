

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue May 04 16:25:38 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x7E,2
    14  0000                     
    15                           ; Version 2.20
    16                           ; Generated 12/02/2020 GMT
    17                           ; 
    18                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F887 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49  0000                     	;# 
    50  0001                     	;# 
    51  0002                     	;# 
    52  0003                     	;# 
    53  0004                     	;# 
    54  0005                     	;# 
    55  0006                     	;# 
    56  0007                     	;# 
    57  0008                     	;# 
    58  0009                     	;# 
    59  000A                     	;# 
    60  000B                     	;# 
    61  000C                     	;# 
    62  000D                     	;# 
    63  000E                     	;# 
    64  000E                     	;# 
    65  000F                     	;# 
    66  0010                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0013                     	;# 
    70  0014                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  001D                     	;# 
    82  001E                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0087                     	;# 
    88  0088                     	;# 
    89  0089                     	;# 
    90  008C                     	;# 
    91  008D                     	;# 
    92  008E                     	;# 
    93  008F                     	;# 
    94  0090                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0095                     	;# 
   102  0096                     	;# 
   103  0097                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  0105                     	;# 
   113  0107                     	;# 
   114  0108                     	;# 
   115  0109                     	;# 
   116  010C                     	;# 
   117  010C                     	;# 
   118  010D                     	;# 
   119  010E                     	;# 
   120  010F                     	;# 
   121  0185                     	;# 
   122  0187                     	;# 
   123  0188                     	;# 
   124  0189                     	;# 
   125  018C                     	;# 
   126  018D                     	;# 
   127  0000                     	;# 
   128  0001                     	;# 
   129  0002                     	;# 
   130  0003                     	;# 
   131  0004                     	;# 
   132  0005                     	;# 
   133  0006                     	;# 
   134  0007                     	;# 
   135  0008                     	;# 
   136  0009                     	;# 
   137  000A                     	;# 
   138  000B                     	;# 
   139  000C                     	;# 
   140  000D                     	;# 
   141  000E                     	;# 
   142  000E                     	;# 
   143  000F                     	;# 
   144  0010                     	;# 
   145  0011                     	;# 
   146  0012                     	;# 
   147  0013                     	;# 
   148  0014                     	;# 
   149  0015                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  001A                     	;# 
   156  001B                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  001D                     	;# 
   160  001E                     	;# 
   161  001F                     	;# 
   162  0081                     	;# 
   163  0085                     	;# 
   164  0086                     	;# 
   165  0087                     	;# 
   166  0088                     	;# 
   167  0089                     	;# 
   168  008C                     	;# 
   169  008D                     	;# 
   170  008E                     	;# 
   171  008F                     	;# 
   172  0090                     	;# 
   173  0091                     	;# 
   174  0092                     	;# 
   175  0093                     	;# 
   176  0093                     	;# 
   177  0093                     	;# 
   178  0094                     	;# 
   179  0095                     	;# 
   180  0096                     	;# 
   181  0097                     	;# 
   182  0098                     	;# 
   183  0099                     	;# 
   184  009A                     	;# 
   185  009B                     	;# 
   186  009C                     	;# 
   187  009D                     	;# 
   188  009E                     	;# 
   189  009F                     	;# 
   190  0105                     	;# 
   191  0107                     	;# 
   192  0108                     	;# 
   193  0109                     	;# 
   194  010C                     	;# 
   195  010C                     	;# 
   196  010D                     	;# 
   197  010E                     	;# 
   198  010F                     	;# 
   199  0185                     	;# 
   200  0187                     	;# 
   201  0188                     	;# 
   202  0189                     	;# 
   203  018C                     	;# 
   204  018D                     	;# 
   205  001A                     _RCREG	set	26
   206  0019                     _TXREG	set	25
   207  000C                     _PIR1bits	set	12
   208  0018                     _RCSTAbits	set	24
   209  0006                     _PORTB	set	6
   210  0005                     _PORTA	set	5
   211  009A                     _SPBRGH	set	154
   212  0099                     _SPBRG	set	153
   213  0098                     _TXSTAbits	set	152
   214  008F                     _OSCCONbits	set	143
   215  0086                     _TRISB	set	134
   216  0085                     _TRISA	set	133
   217  0187                     _BAUDCTLbits	set	391
   218  0189                     _ANSELH	set	393
   219  0188                     _ANSEL	set	392
   220                           
   221                           	psect	strings
   222  0003                     __pstrings:
   223  0003                     stringtab:
   224  0003                     __stringtab:
   225  0003                     stringcode:	
   226                           ;	String table - string pointers are 1 byte each
   227                           
   228  0003                     stringdir:
   229  0003  3000               	movlw	high stringdir
   230  0004  008A               	movwf	10
   231  0005  0804               	movf	4,w
   232  0006  0A84               	incf	4,f
   233  0007  0782               	addwf	2,f
   234  0008                     __stringbase:
   235  0008  3400               	retlw	0
   236  0009                     __end_of__stringtab:
   237  0009                     STR_6:
   238  0009  3420               	retlw	32	;' '
   239  000A  3449               	retlw	73	;'I'
   240  000B  346E               	retlw	110	;'n'
   241  000C  3467               	retlw	103	;'g'
   242  000D  3472               	retlw	114	;'r'
   243  000E  3465               	retlw	101	;'e'
   244  000F  3473               	retlw	115	;'s'
   245  0010  3461               	retlw	97	;'a'
   246  0011  3420               	retlw	32	;' '
   247  0012  3475               	retlw	117	;'u'
   248  0013  346E               	retlw	110	;'n'
   249  0014  3420               	retlw	32	;' '
   250  0015  3463               	retlw	99	;'c'
   251  0016  3461               	retlw	97	;'a'
   252  0017  3472               	retlw	114	;'r'
   253  0018  3461               	retlw	97	;'a'
   254  0019  3463               	retlw	99	;'c'
   255  001A  3474               	retlw	116	;'t'
   256  001B  3465               	retlw	101	;'e'
   257  001C  3472               	retlw	114	;'r'
   258  001D  3420               	retlw	32	;' '
   259  001E  3470               	retlw	112	;'p'
   260  001F  3461               	retlw	97	;'a'
   261  0020  3472               	retlw	114	;'r'
   262  0021  3461               	retlw	97	;'a'
   263  0022  3420               	retlw	32	;' '
   264  0023  3465               	retlw	101	;'e'
   265  0024  346C               	retlw	108	;'l'
   266  0025  3420               	retlw	32	;' '
   267  0026  3470               	retlw	112	;'p'
   268  0027  3475               	retlw	117	;'u'
   269  0028  3465               	retlw	101	;'e'
   270  0029  3472               	retlw	114	;'r'
   271  002A  3474               	retlw	116	;'t'
   272  002B  346F               	retlw	111	;'o'
   273  002C  3420               	retlw	32	;' '
   274  002D  3441               	retlw	65	;'A'
   275  002E  343A               	retlw	58	;':'
   276  002F  3420               	retlw	32	;' '
   277  0030  3400               	retlw	0
   278  0031                     STR_8:
   279  0031  3420               	retlw	32	;' '
   280  0032  3449               	retlw	73	;'I'
   281  0033  346E               	retlw	110	;'n'
   282  0034  3467               	retlw	103	;'g'
   283  0035  3472               	retlw	114	;'r'
   284  0036  3465               	retlw	101	;'e'
   285  0037  3473               	retlw	115	;'s'
   286  0038  3461               	retlw	97	;'a'
   287  0039  3420               	retlw	32	;' '
   288  003A  3475               	retlw	117	;'u'
   289  003B  346E               	retlw	110	;'n'
   290  003C  3420               	retlw	32	;' '
   291  003D  3463               	retlw	99	;'c'
   292  003E  3461               	retlw	97	;'a'
   293  003F  3472               	retlw	114	;'r'
   294  0040  3461               	retlw	97	;'a'
   295  0041  3463               	retlw	99	;'c'
   296  0042  3474               	retlw	116	;'t'
   297  0043  3465               	retlw	101	;'e'
   298  0044  3472               	retlw	114	;'r'
   299  0045  3420               	retlw	32	;' '
   300  0046  3470               	retlw	112	;'p'
   301  0047  3461               	retlw	97	;'a'
   302  0048  3472               	retlw	114	;'r'
   303  0049  3461               	retlw	97	;'a'
   304  004A  3420               	retlw	32	;' '
   305  004B  3465               	retlw	101	;'e'
   306  004C  346C               	retlw	108	;'l'
   307  004D  3420               	retlw	32	;' '
   308  004E  3470               	retlw	112	;'p'
   309  004F  3475               	retlw	117	;'u'
   310  0050  3465               	retlw	101	;'e'
   311  0051  3472               	retlw	114	;'r'
   312  0052  3474               	retlw	116	;'t'
   313  0053  346F               	retlw	111	;'o'
   314  0054  3420               	retlw	32	;' '
   315  0055  3442               	retlw	66	;'B'
   316  0056  343A               	retlw	58	;':'
   317  0057  3420               	retlw	32	;' '
   318  0058  3400               	retlw	0
   319  0059                     STR_2:
   320  0059  3420               	retlw	32	;' '
   321  005A  3431               	retlw	49	;'1'
   322  005B  3429               	retlw	41	;')'
   323  005C  3420               	retlw	32	;' '
   324  005D  3444               	retlw	68	;'D'
   325  005E  3465               	retlw	101	;'e'
   326  005F  3473               	retlw	115	;'s'
   327  0060  3470               	retlw	112	;'p'
   328  0061  346C               	retlw	108	;'l'
   329  0062  3465               	retlw	101	;'e'
   330  0063  3467               	retlw	103	;'g'
   331  0064  3461               	retlw	97	;'a'
   332  0065  3472               	retlw	114	;'r'
   333  0066  3420               	retlw	32	;' '
   334  0067  3463               	retlw	99	;'c'
   335  0068  3461               	retlw	97	;'a'
   336  0069  3464               	retlw	100	;'d'
   337  006A  3465               	retlw	101	;'e'
   338  006B  346E               	retlw	110	;'n'
   339  006C  3461               	retlw	97	;'a'
   340  006D  3420               	retlw	32	;' '
   341  006E  3464               	retlw	100	;'d'
   342  006F  3465               	retlw	101	;'e'
   343  0070  3420               	retlw	32	;' '
   344  0071  3463               	retlw	99	;'c'
   345  0072  3461               	retlw	97	;'a'
   346  0073  3472               	retlw	114	;'r'
   347  0074  3461               	retlw	97	;'a'
   348  0075  3463               	retlw	99	;'c'
   349  0076  3474               	retlw	116	;'t'
   350  0077  3465               	retlw	101	;'e'
   351  0078  3472               	retlw	114	;'r'
   352  0079  3465               	retlw	101	;'e'
   353  007A  3473               	retlw	115	;'s'
   354  007B  3420               	retlw	32	;' '
   355  007C  340D               	retlw	13
   356  007D  3400               	retlw	0
   357  007E                     STR_1:
   358  007E  340D               	retlw	13
   359  007F  3420               	retlw	32	;' '
   360  0080  3451               	retlw	81	;'Q'
   361  0081  3475               	retlw	117	;'u'
   362  0082  3465               	retlw	101	;'e'
   363  0083  3420               	retlw	32	;' '
   364  0084  3461               	retlw	97	;'a'
   365  0085  3463               	retlw	99	;'c'
   366  0086  3463               	retlw	99	;'c'
   367  0087  3469               	retlw	105	;'i'
   368  0088  346F               	retlw	111	;'o'
   369  0089  346E               	retlw	110	;'n'
   370  008A  3420               	retlw	32	;' '
   371  008B  3464               	retlw	100	;'d'
   372  008C  3465               	retlw	101	;'e'
   373  008D  3473               	retlw	115	;'s'
   374  008E  3465               	retlw	101	;'e'
   375  008F  3461               	retlw	97	;'a'
   376  0090  3420               	retlw	32	;' '
   377  0091  3465               	retlw	101	;'e'
   378  0092  346A               	retlw	106	;'j'
   379  0093  3465               	retlw	101	;'e'
   380  0094  3463               	retlw	99	;'c'
   381  0095  3475               	retlw	117	;'u'
   382  0096  3474               	retlw	116	;'t'
   383  0097  3461               	retlw	97	;'a'
   384  0098  3472               	retlw	114	;'r'
   385  0099  343F               	retlw	63	;'?'
   386  009A  3420               	retlw	32	;' '
   387  009B  340D               	retlw	13
   388  009C  3400               	retlw	0
   389  009D                     STR_4:
   390  009D  3420               	retlw	32	;' '
   391  009E  3433               	retlw	51	;'3'
   392  009F  3429               	retlw	41	;')'
   393  00A0  3420               	retlw	32	;' '
   394  00A1  3443               	retlw	67	;'C'
   395  00A2  3461               	retlw	97	;'a'
   396  00A3  346D               	retlw	109	;'m'
   397  00A4  3462               	retlw	98	;'b'
   398  00A5  3469               	retlw	105	;'i'
   399  00A6  3461               	retlw	97	;'a'
   400  00A7  3472               	retlw	114	;'r'
   401  00A8  3420               	retlw	32	;' '
   402  00A9  3450               	retlw	80	;'P'
   403  00AA  344F               	retlw	79	;'O'
   404  00AB  3452               	retlw	82	;'R'
   405  00AC  3454               	retlw	84	;'T'
   406  00AD  3442               	retlw	66	;'B'
   407  00AE  3420               	retlw	32	;' '
   408  00AF  340D               	retlw	13
   409  00B0  3420               	retlw	32	;' '
   410  00B1  340D               	retlw	13
   411  00B2  3400               	retlw	0
   412  00B3                     STR_3:
   413  00B3  3420               	retlw	32	;' '
   414  00B4  3432               	retlw	50	;'2'
   415  00B5  3429               	retlw	41	;')'
   416  00B6  3420               	retlw	32	;' '
   417  00B7  3443               	retlw	67	;'C'
   418  00B8  3461               	retlw	97	;'a'
   419  00B9  346D               	retlw	109	;'m'
   420  00BA  3462               	retlw	98	;'b'
   421  00BB  3469               	retlw	105	;'i'
   422  00BC  3461               	retlw	97	;'a'
   423  00BD  3472               	retlw	114	;'r'
   424  00BE  3420               	retlw	32	;' '
   425  00BF  3450               	retlw	80	;'P'
   426  00C0  344F               	retlw	79	;'O'
   427  00C1  3452               	retlw	82	;'R'
   428  00C2  3454               	retlw	84	;'T'
   429  00C3  3441               	retlw	65	;'A'
   430  00C4  3420               	retlw	32	;' '
   431  00C5  340D               	retlw	13
   432  00C6  3400               	retlw	0
   433  00C7                     STR_5:
   434  00C7  3420               	retlw	32	;' '
   435  00C8  3448               	retlw	72	;'H'
   436  00C9  3465               	retlw	101	;'e'
   437  00CA  346C               	retlw	108	;'l'
   438  00CB  346C               	retlw	108	;'l'
   439  00CC  346F               	retlw	111	;'o'
   440  00CD  3420               	retlw	32	;' '
   441  00CE  3466               	retlw	102	;'f'
   442  00CF  3463               	retlw	99	;'c'
   443  00D0  346B               	retlw	107	;'k'
   444  00D1  3420               	retlw	32	;' '
   445  00D2  3477               	retlw	119	;'w'
   446  00D3  3472               	retlw	114	;'r'
   447  00D4  346C               	retlw	108	;'l'
   448  00D5  3464               	retlw	100	;'d'
   449  00D6  3420               	retlw	32	;' '
   450  00D7  3400               	retlw	0
   451  00D8                     STR_7:
   452  00D8  3420               	retlw	32	;' '
   453  00D9  344C               	retlw	76	;'L'
   454  00DA  3469               	retlw	105	;'i'
   455  00DB  3473               	retlw	115	;'s'
   456  00DC  3474               	retlw	116	;'t'
   457  00DD  346F               	retlw	111	;'o'
   458  00DE  3420               	retlw	32	;' '
   459  00DF  3400               	retlw	0
   460  00D8                     
   461                           	psect	cinit
   462  07FA                     start_initialization:	
   463                           ; #config settings
   464                           
   465  07FA                     __initialization:
   466                           
   467                           ; Clear objects allocated to COMMON
   468  07FA  01F5               	clrf	__pbssCOMMON& (0+127)
   469  07FB  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   470  07FC                     end_of_initialization:	
   471                           ;End of C runtime variable initialization code
   472                           
   473  07FC                     __end_of__initialization:
   474  07FC  0183               	clrf	3
   475  07FD  120A  118A  2F3B   	ljmp	_main	;jump to C main() function
   476                           
   477                           	psect	bssCOMMON
   478  0075                     __pbssCOMMON:
   479  0075                     _loop:
   480  0075                     	ds	1
   481  0076                     _valor:
   482  0076                     	ds	1
   483                           
   484                           	psect	cstackCOMMON
   485  0070                     __pcstackCOMMON:
   486  0070                     ?_USART_Cadena:
   487  0070                     ?_USART_Rx:	
   488                           ; 1 bytes @ 0x0
   489                           
   490  0070                     ??_USART_Rx:	
   491                           ; 1 bytes @ 0x0
   492                           
   493  0070                     ?_main:	
   494                           ; 1 bytes @ 0x0
   495                           
   496  0070                     ?_USART_Tx:	
   497                           ; 1 bytes @ 0x0
   498                           
   499  0070                     ??_USART_Tx:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0070                     USART_Tx@data:	
   503                           ; 1 bytes @ 0x0
   504                           
   505                           
   506                           ; 1 bytes @ 0x0
   507  0070                     	ds	1
   508  0071                     ??_USART_Cadena:
   509                           
   510                           ; 1 bytes @ 0x1
   511  0071                     	ds	1
   512  0072                     USART_Cadena@str:
   513                           
   514                           ; 1 bytes @ 0x2
   515  0072                     	ds	1
   516  0073                     ??_main:
   517                           
   518                           ; 1 bytes @ 0x3
   519  0073                     	ds	2
   520                           
   521                           	psect	maintext
   522  073B                     __pmaintext:	
   523 ;;
   524 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   525 ;;
   526 ;; *************** function _main *****************
   527 ;; Defined at:
   528 ;;		line 55 in file "uart.c"
   529 ;; Parameters:    Size  Location     Type
   530 ;;		None
   531 ;; Auto vars:     Size  Location     Type
   532 ;;		None
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      void 
   535 ;; Registers used:
   536 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   537 ;; Tracked objects:
   538 ;;		On entry : B00/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   542 ;;      Params:         0       0       0       0       0
   543 ;;      Locals:         0       0       0       0       0
   544 ;;      Temps:          2       0       0       0       0
   545 ;;      Totals:         2       0       0       0       0
   546 ;;Total ram usage:        2 bytes
   547 ;; Hardware stack levels required when called:    2
   548 ;; This function calls:
   549 ;;		_USART_Cadena
   550 ;;		_USART_Rx
   551 ;; This function is called by:
   552 ;;		Startup code after reset
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           
   557                           ;psect for function _main
   558  073B                     _main:
   559  073B                     l800:	
   560                           ;incstack = 0
   561                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   562                           
   563                           
   564                           ;uart.c: 57:     ANSEL = 0X00;
   565  073B  1683               	bsf	3,5	;RP0=1, select bank3
   566  073C  1703               	bsf	3,6	;RP1=1, select bank3
   567  073D  0188               	clrf	8	;volatile
   568                           
   569                           ;uart.c: 58:     ANSELH = 0x00;
   570  073E  0189               	clrf	9	;volatile
   571                           
   572                           ;uart.c: 60:     TRISA = 0x00;
   573  073F  1683               	bsf	3,5	;RP0=1, select bank1
   574  0740  1303               	bcf	3,6	;RP1=0, select bank1
   575  0741  0185               	clrf	5	;volatile
   576                           
   577                           ;uart.c: 61:     TRISB = 0x00;
   578  0742  0186               	clrf	6	;volatile
   579                           
   580                           ;uart.c: 63:     PORTA = 0x00;
   581  0743  1283               	bcf	3,5	;RP0=0, select bank0
   582  0744  1303               	bcf	3,6	;RP1=0, select bank0
   583  0745  0185               	clrf	5	;volatile
   584                           
   585                           ;uart.c: 64:     PORTB = 0x00;
   586  0746  0186               	clrf	6	;volatile
   587  0747                     l802:
   588                           
   589                           ;uart.c: 66:     OSCCONbits.IRCF = 0b111 ;
   590  0747  3070               	movlw	112
   591  0748  1683               	bsf	3,5	;RP0=1, select bank1
   592  0749  1303               	bcf	3,6	;RP1=0, select bank1
   593  074A  048F               	iorwf	15,f	;volatile
   594  074B                     l804:
   595                           
   596                           ;uart.c: 67:     OSCCONbits.SCS = 1;
   597  074B  140F               	bsf	15,0	;volatile
   598  074C                     l806:
   599                           
   600                           ;uart.c: 70:     TXSTAbits.SYNC = 0;
   601  074C  1218               	bcf	24,4	;volatile
   602  074D                     l808:
   603                           
   604                           ;uart.c: 71:     TXSTAbits.BRGH = 1;
   605  074D  1518               	bsf	24,2	;volatile
   606  074E                     l810:
   607                           
   608                           ;uart.c: 72:     BAUDCTLbits.BRG16 = 1;
   609  074E  1683               	bsf	3,5	;RP0=1, select bank3
   610  074F  1703               	bsf	3,6	;RP1=1, select bank3
   611  0750  1587               	bsf	7,3	;volatile
   612  0751                     l812:
   613                           
   614                           ;uart.c: 74:     SPBRG = 207;
   615  0751  30CF               	movlw	207
   616  0752  1683               	bsf	3,5	;RP0=1, select bank1
   617  0753  1303               	bcf	3,6	;RP1=0, select bank1
   618  0754  0099               	movwf	25	;volatile
   619  0755                     l814:
   620                           
   621                           ;uart.c: 75:     SPBRGH = 0;
   622  0755  019A               	clrf	26	;volatile
   623  0756                     l816:
   624                           
   625                           ;uart.c: 77:     RCSTAbits.SPEN = 1;
   626  0756  1283               	bcf	3,5	;RP0=0, select bank0
   627  0757  1303               	bcf	3,6	;RP1=0, select bank0
   628  0758  1798               	bsf	24,7	;volatile
   629  0759                     l818:
   630                           
   631                           ;uart.c: 78:     RCSTAbits.RX9 = 0;
   632  0759  1318               	bcf	24,6	;volatile
   633  075A                     l820:
   634                           
   635                           ;uart.c: 79:     RCSTAbits.CREN = 1;
   636  075A  1618               	bsf	24,4	;volatile
   637  075B                     l822:
   638                           
   639                           ;uart.c: 80:     TXSTAbits.TXEN = 1;
   640  075B  1683               	bsf	3,5	;RP0=1, select bank1
   641  075C  1303               	bcf	3,6	;RP1=0, select bank1
   642  075D  1698               	bsf	24,5	;volatile
   643  075E                     l824:
   644                           
   645                           ;uart.c: 86:         USART_Cadena("\r Que accion desea ejecutar? \r");
   646  075E  3076               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   647  075F  120A  118A  271C  120A  118A  	fcall	_USART_Cadena
   648  0764                     l826:
   649                           
   650                           ;uart.c: 87:         USART_Cadena(" 1) Desplegar cadena de caracteres \r");
   651  0764  3051               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   652  0765  120A  118A  271C  120A  118A  	fcall	_USART_Cadena
   653  076A                     l828:
   654                           
   655                           ;uart.c: 88:         USART_Cadena(" 2) Cambiar PORTA \r");
   656  076A  30AB               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   657  076B  120A  118A  271C  120A  118A  	fcall	_USART_Cadena
   658  0770                     l830:
   659                           
   660                           ;uart.c: 89:         USART_Cadena(" 3) Cambiar PORTB \r \r");
   661  0770  3095               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   662  0771  120A  118A  271C  120A  118A  	fcall	_USART_Cadena
   663  0776                     l44:	
   664                           ;uart.c: 92:         while(PIR1bits.RCIF == 0);
   665                           
   666  0776  1283               	bcf	3,5	;RP0=0, select bank0
   667  0777  1303               	bcf	3,6	;RP1=0, select bank0
   668  0778  1E8C               	btfss	12,5	;volatile
   669  0779  2F7B               	goto	u101
   670  077A  2F7C               	goto	u100
   671  077B                     u101:
   672  077B  2F76               	goto	l44
   673  077C                     u100:
   674  077C                     l46:
   675                           
   676                           ;uart.c: 94:         if(PIR1bits.RCIF){
   677  077C  1E8C               	btfss	12,5	;volatile
   678  077D  2F7F               	goto	u111
   679  077E  2F80               	goto	u110
   680  077F                     u111:
   681  077F  2F5E               	goto	l824
   682  0780                     u110:
   683  0780                     l832:
   684                           
   685                           ;uart.c: 96:             valor = USART_Rx();
   686  0780  120A  118A  270C  120A  118A  	fcall	_USART_Rx
   687  0785  00F3               	movwf	??_main
   688  0786  0873               	movf	??_main,w
   689  0787  00F6               	movwf	_valor
   690                           
   691                           ;uart.c: 98:             switch(valor){
   692  0788  2FE4               	goto	l868
   693  0789                     l834:
   694                           
   695                           ;uart.c: 100:                     USART_Cadena(" Hello fck wrld ");
   696  0789  30BF               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   697  078A  120A  118A  271C  120A  118A  	fcall	_USART_Cadena
   698  078F                     l836:
   699                           
   700                           ;uart.c: 101:                     TXREG = '\r';
   701  078F  300D               	movlw	13
   702  0790  1283               	bcf	3,5	;RP0=0, select bank0
   703  0791  1303               	bcf	3,6	;RP1=0, select bank0
   704  0792  0099               	movwf	25	;volatile
   705                           
   706                           ;uart.c: 102:                     break;
   707  0793  2F5E               	goto	l824
   708  0794                     l51:	
   709                           ;uart.c: 104:                 case ('2'):
   710                           
   711                           
   712                           ;uart.c: 105:                     loop = 1;
   713  0794  01F5               	clrf	_loop
   714  0795  0AF5               	incf	_loop,f
   715  0796                     l838:
   716                           
   717                           ;uart.c: 106:                     USART_Cadena(" Ingresa un caracter para el puerto A: "
      +                          );
   718  0796  3001               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   719  0797  120A  118A  271C  120A  118A  	fcall	_USART_Cadena
   720                           
   721                           ;uart.c: 107:                     while(loop){
   722  079C  2FAC               	goto	l844
   723  079D                     l53:
   724                           
   725                           ;uart.c: 108:                         if(PIR1bits.RCIF){
   726  079D  1283               	bcf	3,5	;RP0=0, select bank0
   727  079E  1303               	bcf	3,6	;RP1=0, select bank0
   728  079F  1E8C               	btfss	12,5	;volatile
   729  07A0  2FA2               	goto	u121
   730  07A1  2FA3               	goto	u120
   731  07A2                     u121:
   732  07A2  2FAC               	goto	l844
   733  07A3                     u120:
   734  07A3                     l840:
   735                           
   736                           ;uart.c: 109:                             PORTA = USART_Rx();
   737  07A3  120A  118A  270C  120A  118A  	fcall	_USART_Rx
   738  07A8  1283               	bcf	3,5	;RP0=0, select bank0
   739  07A9  1303               	bcf	3,6	;RP1=0, select bank0
   740  07AA  0085               	movwf	5	;volatile
   741  07AB                     l842:
   742                           
   743                           ;uart.c: 110:                             loop = 0;
   744  07AB  01F5               	clrf	_loop
   745  07AC                     l844:
   746                           
   747                           ;uart.c: 107:                     while(loop){
   748  07AC  0875               	movf	_loop,w
   749  07AD  1D03               	btfss	3,2
   750  07AE  2FB0               	goto	u131
   751  07AF  2FB1               	goto	u130
   752  07B0                     u131:
   753  07B0  2F9D               	goto	l53
   754  07B1                     u130:
   755  07B1                     l846:
   756                           
   757                           ;uart.c: 113:                     TXREG = '\r';
   758  07B1  300D               	movlw	13
   759  07B2  1283               	bcf	3,5	;RP0=0, select bank0
   760  07B3  1303               	bcf	3,6	;RP1=0, select bank0
   761  07B4  0099               	movwf	25	;volatile
   762  07B5                     l848:
   763                           
   764                           ;uart.c: 114:                     USART_Cadena(" Listo ");
   765  07B5  30D0               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   766  07B6  120A  118A  271C  120A  118A  	fcall	_USART_Cadena
   767  07BB  2F8F               	goto	l836
   768  07BC                     l56:	
   769                           ;uart.c: 118:                 case ('3'):
   770                           
   771                           
   772                           ;uart.c: 119:                     loop = 1;
   773  07BC  01F5               	clrf	_loop
   774  07BD  0AF5               	incf	_loop,f
   775  07BE                     l852:
   776                           
   777                           ;uart.c: 120:                     USART_Cadena(" Ingresa un caracter para el puerto B: "
      +                          );
   778  07BE  3029               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
   779  07BF  120A  118A  271C  120A  118A  	fcall	_USART_Cadena
   780                           
   781                           ;uart.c: 121:                     while(loop){
   782  07C4  2FD4               	goto	l858
   783  07C5                     l58:
   784                           
   785                           ;uart.c: 122:                         if(PIR1bits.RCIF){
   786  07C5  1283               	bcf	3,5	;RP0=0, select bank0
   787  07C6  1303               	bcf	3,6	;RP1=0, select bank0
   788  07C7  1E8C               	btfss	12,5	;volatile
   789  07C8  2FCA               	goto	u141
   790  07C9  2FCB               	goto	u140
   791  07CA                     u141:
   792  07CA  2FD4               	goto	l858
   793  07CB                     u140:
   794  07CB                     l854:
   795                           
   796                           ;uart.c: 123:                             PORTB = USART_Rx();
   797  07CB  120A  118A  270C  120A  118A  	fcall	_USART_Rx
   798  07D0  1283               	bcf	3,5	;RP0=0, select bank0
   799  07D1  1303               	bcf	3,6	;RP1=0, select bank0
   800  07D2  0086               	movwf	6	;volatile
   801  07D3                     l856:
   802                           
   803                           ;uart.c: 124:                             loop = 0;
   804  07D3  01F5               	clrf	_loop
   805  07D4                     l858:
   806                           
   807                           ;uart.c: 121:                     while(loop){
   808  07D4  0875               	movf	_loop,w
   809  07D5  1D03               	btfss	3,2
   810  07D6  2FD8               	goto	u151
   811  07D7  2FD9               	goto	u150
   812  07D8                     u151:
   813  07D8  2FC5               	goto	l58
   814  07D9                     u150:
   815  07D9                     l860:
   816                           
   817                           ;uart.c: 128:                     TXREG = '\r';
   818  07D9  300D               	movlw	13
   819  07DA  1283               	bcf	3,5	;RP0=0, select bank0
   820  07DB  1303               	bcf	3,6	;RP1=0, select bank0
   821  07DC  0099               	movwf	25	;volatile
   822  07DD                     l862:
   823                           
   824                           ;uart.c: 129:                     USART_Cadena(" Listo ");
   825  07DD  30D0               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   826  07DE  120A  118A  271C  120A  118A  	fcall	_USART_Cadena
   827  07E3  2F8F               	goto	l836
   828  07E4                     l868:
   829  07E4  0876               	movf	_valor,w
   830  07E5  00F3               	movwf	??_main
   831  07E6  01F4               	clrf	??_main+1
   832                           
   833                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   834                           ; Switch size 1, requested type "simple"
   835                           ; Number of cases is 1, Range of values is 0 to 0
   836                           ; switch strategies available:
   837                           ; Name         Instructions Cycles
   838                           ; simple_byte            4     3 (average)
   839                           ; direct_byte           11     8 (fixed)
   840                           ; jumptable            260     6 (fixed)
   841                           ;	Chosen strategy is simple_byte
   842  07E7  0874               	movf	??_main+1,w
   843  07E8  3A00               	xorlw	0	; case 0
   844  07E9  1903               	skipnz
   845  07EA  2FEC               	goto	l906
   846  07EB  2F5E               	goto	l824
   847  07EC                     l906:
   848                           
   849                           ; Switch size 1, requested type "simple"
   850                           ; Number of cases is 3, Range of values is 49 to 51
   851                           ; switch strategies available:
   852                           ; Name         Instructions Cycles
   853                           ; simple_byte           10     6 (average)
   854                           ; direct_byte           20    11 (fixed)
   855                           ; jumptable            263     9 (fixed)
   856                           ;	Chosen strategy is simple_byte
   857  07EC  0873               	movf	??_main,w
   858  07ED  3A31               	xorlw	49	; case 49
   859  07EE  1903               	skipnz
   860  07EF  2F89               	goto	l834
   861  07F0  3A03               	xorlw	3	; case 50
   862  07F1  1903               	skipnz
   863  07F2  2F94               	goto	l51
   864  07F3  3A01               	xorlw	1	; case 51
   865  07F4  1903               	skipnz
   866  07F5  2FBC               	goto	l56
   867  07F6  2F5E               	goto	l824
   868  07F7  120A  118A  2800   	ljmp	start
   869  07FA                     __end_of_main:
   870                           
   871                           	psect	text1
   872  070C                     __ptext1:	
   873 ;; *************** function _USART_Rx *****************
   874 ;; Defined at:
   875 ;;		line 145 in file "uart.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;		None
   878 ;; Auto vars:     Size  Location     Type
   879 ;;		None
   880 ;; Return value:  Size  Location     Type
   881 ;;                  1    wreg      unsigned char 
   882 ;; Registers used:
   883 ;;		wreg
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   889 ;;      Params:         0       0       0       0       0
   890 ;;      Locals:         0       0       0       0       0
   891 ;;      Temps:          0       0       0       0       0
   892 ;;      Totals:         0       0       0       0       0
   893 ;;Total ram usage:        0 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; This function calls:
   896 ;;		Nothing
   897 ;; This function is called by:
   898 ;;		_main
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           
   903                           ;psect for function _USART_Rx
   904  070C                     _USART_Rx:
   905  070C                     l682:	
   906                           ;incstack = 0
   907                           ; Regs used in _USART_Rx: [wreg]
   908                           
   909                           
   910                           ;uart.c: 146:         return RCREG;
   911  070C  1283               	bcf	3,5	;RP0=0, select bank0
   912  070D  1303               	bcf	3,6	;RP1=0, select bank0
   913  070E  081A               	movf	26,w	;volatile
   914  070F                     l72:
   915  070F  0008               	return
   916  0710                     __end_of_USART_Rx:
   917                           
   918                           	psect	text2
   919  071C                     __ptext2:	
   920 ;; *************** function _USART_Cadena *****************
   921 ;; Defined at:
   922 ;;		line 149 in file "uart.c"
   923 ;; Parameters:    Size  Location     Type
   924 ;;  str             1    wreg     PTR unsigned char 
   925 ;;		 -> STR_9(8), STR_8(40), STR_7(8), STR_6(40), 
   926 ;;		 -> STR_5(17), STR_4(22), STR_3(20), STR_2(37), 
   927 ;;		 -> STR_1(31), 
   928 ;; Auto vars:     Size  Location     Type
   929 ;;  str             1    2[COMMON] PTR unsigned char 
   930 ;;		 -> STR_9(8), STR_8(40), STR_7(8), STR_6(40), 
   931 ;;		 -> STR_5(17), STR_4(22), STR_3(20), STR_2(37), 
   932 ;;		 -> STR_1(31), 
   933 ;; Return value:  Size  Location     Type
   934 ;;                  1    wreg      void 
   935 ;; Registers used:
   936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   942 ;;      Params:         0       0       0       0       0
   943 ;;      Locals:         1       0       0       0       0
   944 ;;      Temps:          1       0       0       0       0
   945 ;;      Totals:         2       0       0       0       0
   946 ;;Total ram usage:        2 bytes
   947 ;; Hardware stack levels used:    1
   948 ;; Hardware stack levels required when called:    1
   949 ;; This function calls:
   950 ;;		_USART_Tx
   951 ;; This function is called by:
   952 ;;		_main
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           
   957                           ;psect for function _USART_Cadena
   958  071C                     _USART_Cadena:
   959                           
   960                           ;incstack = 0
   961                           ; Regs used in _USART_Cadena: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   962                           ;USART_Cadena@str stored from wreg
   963  071C  00F2               	movwf	USART_Cadena@str
   964  071D                     l792:
   965                           
   966                           ;uart.c: 150:         while(*str != '\0'){
   967  071D  2F2E               	goto	l798
   968  071E                     l794:
   969                           
   970                           ;uart.c: 151:             USART_Tx(*str);
   971  071E  0872               	movf	USART_Cadena@str,w
   972  071F  0084               	movwf	4
   973  0720  120A  118A  2003  120A  118A  	fcall	stringdir
   974  0725  120A  118A  2710  120A  118A  	fcall	_USART_Tx
   975  072A                     l796:
   976                           
   977                           ;uart.c: 152:             str++;
   978  072A  3001               	movlw	1
   979  072B  00F1               	movwf	??_USART_Cadena
   980  072C  0871               	movf	??_USART_Cadena,w
   981  072D  07F2               	addwf	USART_Cadena@str,f
   982  072E                     l798:
   983                           
   984                           ;uart.c: 150:         while(*str != '\0'){
   985  072E  0872               	movf	USART_Cadena@str,w
   986  072F  0084               	movwf	4
   987  0730  120A  118A  2003  120A  118A  	fcall	stringdir
   988  0735  3A00               	xorlw	0
   989  0736  1D03               	skipz
   990  0737  2F39               	goto	u91
   991  0738  2F3A               	goto	u90
   992  0739                     u91:
   993  0739  2F1E               	goto	l794
   994  073A                     u90:
   995  073A                     l78:
   996  073A  0008               	return
   997  073B                     __end_of_USART_Cadena:
   998                           
   999                           	psect	text3
  1000  0710                     __ptext3:	
  1001 ;; *************** function _USART_Tx *****************
  1002 ;; Defined at:
  1003 ;;		line 140 in file "uart.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;  data            1    wreg     unsigned char 
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;  data            1    0[COMMON] unsigned char 
  1008 ;; Return value:  Size  Location     Type
  1009 ;;                  1    wreg      void 
  1010 ;; Registers used:
  1011 ;;		wreg
  1012 ;; Tracked objects:
  1013 ;;		On entry : 0/0
  1014 ;;		On exit  : 0/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1017 ;;      Params:         0       0       0       0       0
  1018 ;;      Locals:         1       0       0       0       0
  1019 ;;      Temps:          0       0       0       0       0
  1020 ;;      Totals:         1       0       0       0       0
  1021 ;;Total ram usage:        1 bytes
  1022 ;; Hardware stack levels used:    1
  1023 ;; This function calls:
  1024 ;;		Nothing
  1025 ;; This function is called by:
  1026 ;;		_USART_Cadena
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           
  1031                           ;psect for function _USART_Tx
  1032  0710                     _USART_Tx:
  1033                           
  1034                           ;incstack = 0
  1035                           ; Regs used in _USART_Tx: [wreg]
  1036                           ;USART_Tx@data stored from wreg
  1037  0710  00F0               	movwf	USART_Tx@data
  1038  0711                     l670:
  1039  0711                     l66:	
  1040                           ;uart.c: 141:         while(TXSTAbits.TRMT == 0);
  1041                           
  1042  0711  1683               	bsf	3,5	;RP0=1, select bank1
  1043  0712  1303               	bcf	3,6	;RP1=0, select bank1
  1044  0713  1C98               	btfss	24,1	;volatile
  1045  0714  2F16               	goto	u11
  1046  0715  2F17               	goto	u10
  1047  0716                     u11:
  1048  0716  2F11               	goto	l66
  1049  0717                     u10:
  1050  0717                     l672:
  1051                           
  1052                           ;uart.c: 142:         TXREG = data;
  1053  0717  0870               	movf	USART_Tx@data,w
  1054  0718  1283               	bcf	3,5	;RP0=0, select bank0
  1055  0719  1303               	bcf	3,6	;RP1=0, select bank0
  1056  071A  0099               	movwf	25	;volatile
  1057  071B                     l69:
  1058  071B  0008               	return
  1059  071C                     __end_of_USART_Tx:
  1060  007E                     btemp	set	126	;btemp
  1061  007E                     wtemp0	set	126
  1062                           
  1063                           	psect	config
  1064                           
  1065                           ;Config register CONFIG1 @ 0x2007
  1066                           ;	Oscillator Selection bits
  1067                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1068                           ;	Watchdog Timer Enable bit
  1069                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1070                           ;	Power-up Timer Enable bit
  1071                           ;	PWRTE = OFF, PWRT disabled
  1072                           ;	RE3/MCLR pin function select bit
  1073                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1074                           ;	Code Protection bit
  1075                           ;	CP = OFF, Program memory code protection is disabled
  1076                           ;	Data Code Protection bit
  1077                           ;	CPD = OFF, Data memory code protection is disabled
  1078                           ;	Brown Out Reset Selection bits
  1079                           ;	BOREN = OFF, BOR disabled
  1080                           ;	Internal External Switchover bit
  1081                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1082                           ;	Fail-Safe Clock Monitor Enabled bit
  1083                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  1084                           ;	Low Voltage Programming Enable bit
  1085                           ;	LVP = ON, RB3/PGM pin has PGM function, low voltage programming enabled
  1086                           ;	In-Circuit Debugger Mode bit
  1087                           ;	DEBUG = 0x1, unprogrammed default
  1088  2007                     	org	8199
  1089  2007  38D4               	dw	14548
  1090                           
  1091                           ;Config register CONFIG2 @ 0x2008
  1092                           ;	Brown-out Reset Selection bit
  1093                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1094                           ;	Flash Program Memory Self Write Enable bits
  1095                           ;	WRT = OFF, Write protection off
  1096  2008                     	org	8200
  1097  2008  3FFF               	dw	16383

Data Sizes:
    Strings     215
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    USART_Cadena@str	PTR unsigned char  size(1) Largest target is 40
		 -> STR_9(CODE[8]), STR_8(CODE[40]), STR_7(CODE[8]), STR_6(CODE[40]), 
		 -> STR_5(CODE[17]), STR_4(CODE[22]), STR_3(CODE[20]), STR_2(CODE[37]), 
		 -> STR_1(CODE[31]), 


Critical Paths under _main in COMMON

    _main->_USART_Cadena
    _USART_Cadena->_USART_Tx

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     357
                                              3 COMMON     2     2      0
                       _USART_Cadena
                           _USART_Rx
 ---------------------------------------------------------------------------------
 (1) _USART_Rx                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USART_Cadena                                         2     2      0     357
                                              1 COMMON     2     2      0
                           _USART_Tx
 ---------------------------------------------------------------------------------
 (2) _USART_Tx                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_Cadena
     _USART_Tx
   _USART_Rx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       7       1       50.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       7       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       7      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue May 04 16:25:38 2021

                      pc 0002                       l51 0794                       l44 0776  
                     l53 079D                       l46 077C                       l72 070F  
                     l56 07BC                       l66 0711                       l58 07C5  
                     l69 071B                       l78 073A                       u10 0717  
                     u11 0716                       u90 073A                       u91 0739  
                     fsr 0004                      l800 073B                      l810 074E  
                    l802 0747                      l820 075A                      l812 0751  
                    l804 074B                      l670 0711                      l830 0770  
                    l822 075B                      l814 0755                      l806 074C  
                    l672 0717                      l840 07A3                      l832 0780  
                    l824 075E                      l816 0756                      l808 074D  
                    l682 070C                      l906 07EC                      l842 07AB  
                    l834 0789                      l826 0764                      l818 0759  
                    l860 07D9                      l852 07BE                      l844 07AC  
                    l836 078F                      l828 076A                      l862 07DD  
                    l854 07CB                      l846 07B1                      l838 0796  
                    l792 071D                      l856 07D3                      l848 07B5  
                    l794 071E                      l858 07D4                      l796 072A  
                    l868 07E4                      l798 072E                      u100 077C  
                    u101 077B                      u110 0780                      u111 077F  
                    u120 07A3                      u121 07A2                      u130 07B1  
                    u131 07B0                      u140 07CB                      u141 07CA  
                    u150 07D9                      u151 07D8                      fsr0 0004  
                   STR_1 007E                     STR_2 0059                     STR_3 00B3  
                   STR_4 009D                     STR_5 00C7                     STR_6 0009  
                   STR_7 00D8                     STR_8 0031                     STR_9 00D8  
                   _main 073B                     _loop 0075                     btemp 007E  
                   start 0000                    ?_main 0070                    _ANSEL 0188  
                  _RCREG 001A                    _SPBRG 0099                    _PORTA 0005  
                  _PORTB 0006                    _TRISA 0085                    _TRISB 0086  
                  _TXREG 0019                    _valor 0076         __end_of_USART_Rx 0710  
       __end_of_USART_Tx 071C             USART_Tx@data 0070                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07FA  
           __end_of_main 07FA                   ??_main 0073                   _ANSELH 0189  
                 _SPBRGH 009A  __end_of__initialization 07FC           __pcstackCOMMON 0070  
              ?_USART_Rx 0070                ?_USART_Tx 0070               __pmaintext 073B  
             ??_USART_Rx 0070               ??_USART_Tx 0070               __stringtab 0003  
                __ptext1 070C                  __ptext2 071C                  __ptext3 0710  
   end_of_initialization 07FC                _RCSTAbits 0018            ?_USART_Cadena 0070  
              _TXSTAbits 0098              _BAUDCTLbits 0187        __size_of_USART_Rx 0004  
      __size_of_USART_Tx 000C      start_initialization 07FA           ??_USART_Cadena 0071  
            __pbssCOMMON 0075                ___latbits 0002                __pstrings 0003  
               _PIR1bits 000C          USART_Cadena@str 0072     __end_of_USART_Cadena 073B  
               _USART_Rx 070C                 _USART_Tx 0710              __stringbase 0008  
     __end_of__stringtab 0009            __size_of_main 00BF                stringcode 0003  
  __size_of_USART_Cadena 001F               _OSCCONbits 008F                 stringdir 0003  
               stringtab 0003             _USART_Cadena 071C  
